package com.markkryzh.entity;

// Generated 5 ����. 2017 16:19:12 by Hibernate Tools 5.2.0.Beta1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.data.annotation.Transient;

import com.markkryzh.entity.Community;
import com.markkryzh.entity.Membership;
import com.markkryzh.entity.Poll;
import com.markkryzh.entity.PollResult;
import com.markkryzh.entity.PollTheme;
import com.markkryzh.entity.TestResult;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", schema = "public", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "name") })
public class User implements java.io.Serializable {
	public static enum UserPermissions {
		USER, ADMIN
	};

	private Integer id;
	private String email;
	private String password;
	private String name;
	private UserPermissions role;
	private Integer enabled;
	private String image;
	private Set<Community> communities = new HashSet<Community>(0);
	private Set<PollTheme> pollThemes = new HashSet<PollTheme>(0);
	private Set<TestResult> testResults = new HashSet<TestResult>(0);
	private Set<Membership> memberships = new HashSet<Membership>(0);
	private Set<Poll> polls = new HashSet<Poll>(0);
	private Set<PollResult> pollResults = new HashSet<PollResult>(0);

	public User() {
	}

	public User(String email, String password, String name, String image) {
		super();
		this.email = email;
		this.password = password;
		this.name = name;
		this.image = image;
	}

	@PrePersist
	protected void onCreate() {
		if (role == null)
			role = UserPermissions.USER;
		if (enabled == null)
			enabled = 1;
	}

	@Column(name = "password", nullable = false)
	@Length(min = 5, message = "*Your password must have at least 5 characters")
	@NotEmpty(message = "*Please provide your password")
	@Transient
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Id
	@GeneratedValue
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "email", unique = true, nullable = false)
	@Email(message = "*Please provide a valid Email")
	@NotEmpty(message = "*Please provide an email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "name", unique = true, nullable = false)
	@NotEmpty(message = "*Please provide your name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "role", nullable = false)
	@Enumerated(EnumType.STRING)
	public UserPermissions getRole() {
		return this.role;
	}

	public void setRole(UserPermissions role) {
		this.role = role;
	}

	@Column(name = "enabled", nullable = false)
	public Integer getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Integer enabled) {
		this.enabled = enabled;
	}

	@Column(name = "image")
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Community> getCommunities() {
		return this.communities;
	}

	public void setCommunities(Set<Community> communities) {
		this.communities = communities;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<PollTheme> getPollThemes() {
		return this.pollThemes;
	}

	public void setPollThemes(Set<PollTheme> pollThemes) {
		this.pollThemes = pollThemes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<TestResult> getTestResults() {
		return this.testResults;
	}

	public void setTestResults(Set<TestResult> testResults) {
		this.testResults = testResults;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Membership> getMemberships() {
		return this.memberships;
	}

	public void setMemberships(Set<Membership> memberships) {
		this.memberships = memberships;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Poll> getPolls() {
		return this.polls;
	}

	public void setPolls(Set<Poll> polls) {
		this.polls = polls;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<PollResult> getPollResults() {
		return this.pollResults;
	}

	public void setPollResults(Set<PollResult> pollResults) {
		this.pollResults = pollResults;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (id == null) {
			return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

}
